"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/comics.tsx":
/*!************************!*\
  !*** ./lib/comics.tsx ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useFetchComics\": function() { return /* binding */ useFetchComics; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\nlet API_URL = \"https://gateway.marvel.com\";\nconst useFetchComics = ()=>{\n    _s();\n    const [comics, setComics] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isLoading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isSuccess, setSuccess] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const fetchComics = async ()=>{\n        let baseUrl = \"\".concat(API_URL, \":443/v1/public/comics\");\n        let apiKey = \"a47015b472fa01cf91d12e737ddda35a\";\n        let url = \"\".concat(baseUrl, \"?limit=30&ts=1&apikey=\").concat(apiKey, \"&hash=bd67ce0fc9068238c3aac6ea8ca58732\");\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            setComics(data.data.results);\n            setSuccess(true);\n            console.log(data.data.results);\n        } catch (err) {\n            setSuccess(false);\n            console.error(err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchComics();\n    }, []);\n    return {\n        comics,\n        isLoading,\n        isSuccess\n    };\n};\n_s(useFetchComics, \"2aYbRb0ESdym1zihwybH4IsRQlQ=\");\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvY29taWNzLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUE0QztBQUU1QyxJQUFJRSxVQUFVQyw0QkFBZ0M7QUFFOUMsTUFBTUcsaUJBQWlCLElBQU07O0lBQ3pCLE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHUiwrQ0FBUUEsQ0FBQyxFQUFFO0lBQ3ZDLE1BQU0sQ0FBQ1MsV0FBV0MsV0FBVyxHQUFHViwrQ0FBUUEsQ0FBQyxLQUFLO0lBQzlDLE1BQU0sQ0FBQ1csV0FBV0MsV0FBVyxHQUFHWiwrQ0FBUUEsQ0FBQyxLQUFLO0lBRTlDLE1BQU1hLGNBQWMsVUFBWTtRQUM5QixJQUFJQyxVQUFVLEdBQVcsT0FBUlosU0FBUTtRQUN6QixJQUFJYSxTQUFTWixrQ0FBK0I7UUFDNUMsSUFBSWMsTUFBTSxHQUFtQ0YsT0FBaENELFNBQVEsMEJBQStCLE9BQVBDLFFBQU87UUFFcEQsSUFBSTtZQUNGLE1BQU1HLFdBQVcsTUFBTUMsTUFBTUY7WUFDN0IsTUFBTUcsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1lBQ2hDYixVQUFVWSxLQUFLQSxJQUFJLENBQUNFLE9BQU87WUFDM0JWLFdBQVcsSUFBSTtZQUNmVyxRQUFRQyxHQUFHLENBQUNKLEtBQUtBLElBQUksQ0FBQ0UsT0FBTztRQUNqQyxFQUFFLE9BQU9HLEtBQUs7WUFDVmIsV0FBVyxLQUFLO1lBQ2hCVyxRQUFRRyxLQUFLLENBQUNEO1FBQ2hCLFNBQVU7WUFDUmYsV0FBVyxLQUFLO1FBQ2xCO0lBQ0Y7SUFFQVQsZ0RBQVNBLENBQUMsSUFBTTtRQUNkWTtJQUNGLEdBQUcsRUFBRTtJQUVMLE9BQU87UUFBRU47UUFBUUU7UUFBV0U7SUFBVTtBQUN4QztHQTdCSUw7QUErQm9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9jb21pY3MudHN4PzczNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmxldCBBUElfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQkFTRV9VUkw7XHJcblxyXG5jb25zdCB1c2VGZXRjaENvbWljcyA9ICgpID0+IHtcclxuICAgIGNvbnN0IFtjb21pY3MsIHNldENvbWljc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtpc1N1Y2Nlc3MsIHNldFN1Y2Nlc3NdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIFxyXG4gICAgY29uc3QgZmV0Y2hDb21pY3MgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGxldCBiYXNlVXJsID0gYCR7QVBJX1VSTH06NDQzL3YxL3B1YmxpYy9jb21pY3NgO1xyXG4gICAgICBsZXQgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX0tFWTtcclxuICAgICAgbGV0IHVybCA9IGAke2Jhc2VVcmx9P2xpbWl0PTMwJnRzPTEmYXBpa2V5PSR7YXBpS2V5fSZoYXNoPWJkNjdjZTBmYzkwNjgyMzhjM2FhYzZlYThjYTU4NzMyYDtcclxuICBcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBzZXRDb21pY3MoZGF0YS5kYXRhLnJlc3VsdHMpO1xyXG4gICAgICAgIHNldFN1Y2Nlc3ModHJ1ZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLnJlc3VsdHMpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgc2V0U3VjY2VzcyhmYWxzZSk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgZmV0Y2hDb21pY3MoKTtcclxuICAgIH0sIFtdKTtcclxuICBcclxuICAgIHJldHVybiB7IGNvbWljcywgaXNMb2FkaW5nLCBpc1N1Y2Nlc3MgfTtcclxuICB9O1xyXG5cclxuICBleHBvcnQge3VzZUZldGNoQ29taWNzfTsiXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJBUElfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0JBU0VfVVJMIiwidXNlRmV0Y2hDb21pY3MiLCJjb21pY3MiLCJzZXRDb21pY3MiLCJpc0xvYWRpbmciLCJzZXRMb2FkaW5nIiwiaXNTdWNjZXNzIiwic2V0U3VjY2VzcyIsImZldGNoQ29taWNzIiwiYmFzZVVybCIsImFwaUtleSIsIk5FWFRfUFVCTElDX0FQSV9LRVkiLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwiZGF0YSIsImpzb24iLCJyZXN1bHRzIiwiY29uc29sZSIsImxvZyIsImVyciIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/comics.tsx\n"));

/***/ })

});